# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: Volunteer Management UI\Volunteer Management UI.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: VMC Unit Tests\VMC Unit Tests.csproj                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Setup_Project_Path: Setup Project\Setup Project.wixproj     # e.g. MyApp.Setup\MyApp.Setup.vdproj
      Setup_Output_Folder: Installs                   # Relative path to where the MSI is output
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Checkout submodules
      run: git submodule update --init --recursive 

    - name: Update the submodules
      run: git submodule update --remote

    - name: Dump directory tree
      shell: powershell
      run: |
        Write-Host "Working dir: $(Get-Location)"
        Get-ChildItem -Force -Recurse

    # - name: Patch ProjectReference paths
    #   shell: pwsh
    #   run: tools/Patch-ProjectReferences.ps1

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

	# Install Wix Toolset v3.11
    - name: Install WiX Toolset
      run: |
        Invoke-WebRequest -Uri https://wixtoolset.org/downloads/v3.11.2.4516/wix311-binaries.zip -OutFile wix.zip
        Expand-Archive wix.zip -DestinationPath "$env:ProgramFiles\WiX Toolset 3.11"
        $env:WIX = "$env:ProgramFiles\WiX Toolset 3.11"
        echo "##[add-path]$env:WIX"  # GitHub Actions v2 only - GitHub deprecated this in favor of `path` key
        echo "$env:WIX" | Out-File -Append -FilePath $env:GITHUB_PATH

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Build the test project
      run: dotnet build ${{ env.Test_Project_Path }} --configuration ${{ matrix.configuration }}

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    - name: Build WiX MSI Project
      run: msbuild $env:Wix_Project_Path /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    - name: Upload MSI Installer
      uses: actions/upload-artifact@v4
      with:
        name: MSI Installer
        path: ${{ env.Setup_Output_Dir }}\*.msi

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
