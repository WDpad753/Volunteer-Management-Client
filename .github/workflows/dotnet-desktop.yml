# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    if: github.actor == github.repository_owner
    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    
    strategy:
      matrix:
        configuration: [Debug, Release]

    env:
      Solution_Name: 'Volunteer Management UI\Volunteer Management UI.sln'
      Main_Project_Path: 'Volunteer Management UI\Volunteer Management UI.csproj'
      Test_Project_Path: 'VMC Unit Tests\VMC Unit Tests.csproj'
      Setup_Project_Path: 'Setup Project\Setup Project.wixproj'
      Setup_Output_Folder: 'Setup Project\Installs'
    
    steps:
    
        - name: Run Owner
          run: echo "This job is running because the workflow was triggered by the repository owner"
        
        - name: Checkout
          uses: actions/checkout@v4
          with:
            fetch-depth: 0
            submodules: recursive

        # - name: Checkout submodules
        #   run: git submodule update --init --recursive 

        # - name: Update the submodules
        #   run: git submodule update --remote

        - name: Dump directory tree
          shell: powershell
          run: |
            Write-Host "Working dir: $(Get-Location)"
            Get-ChildItem -Force -Recurse

        # - name: Patch ProjectReference paths
        #   shell: pwsh
        #   run: tools/Patch-ProjectReferences.ps1

        # Install the .NET Core workload
        - name: Install .NET Core
          uses: actions/setup-dotnet@v4
          with:
            dotnet-version: 8.0.x

        - name: Download WiX Toolset binaries
          shell: pwsh
          run: |
            Invoke-WebRequest -Uri "https://github.com/wixtoolset/wix3/releases/download/wix3141rtm/wix314-binaries.zip" -OutFile "wix314-binaries.zip"
        
        - name: Extract WiX binaries
          shell: pwsh
          run: |
            Expand-Archive -Path wix314-binaries.zip -DestinationPath wix314
        
        - name: Copy WiX binaries to Program Files (x86)
          shell: pwsh
          run: |
            $dest = "C:\Program Files (x86)\WiX Toolset v3.14"
            if (-not (Test-Path $dest)) {
              New-Item -ItemType Directory -Path $dest | Out-Null
            }
            Copy-Item -Path "$env:GITHUB_WORKSPACE\wix314\*" -Destination $dest -Recurse -Force

        - name: Dump full WiX folder tree
          shell: pwsh
          run: |
            Write-Host "Listing full WiX Toolset directory tree:"
            tree "C:\Program Files (x86)\WiX Toolset v3.14" /F /A
        
        - name: Set WiX environment variables
          shell: pwsh
          run: |
            echo "WixToolPath=C:/Program Files (x86)/WiX Toolset v3.14/bin" >> $env:GITHUB_ENV
            echo "WixTargetsPath=C:/Program Files (x86)/WiX Toolset v3.14/wix.targets" >> $env:GITHUB_ENV
            # echo "WixTargetsPath=C:/Program Files (x86)/WiX Toolset v3.14/bin/wix.targets" >> $env:GITHUB_ENV
        
        - name: Verify WiX candle.exe
          shell: pwsh
          run: |
            & "C:\Program Files (x86)\WiX Toolset v3.14\bin\candle.exe" -?

        - name: Restore main project packages
          run: dotnet restore "${{ env.Main_Project_Path }}"
        
        - name: Build main project
          run: dotnet build "${{ env.Main_Project_Path }}" --configuration ${{ matrix.configuration }}

        # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
        - name: Setup MSBuild.exe
          uses: microsoft/setup-msbuild@v2

        - name: Build the test project
          run: dotnet build "${{ env.Test_Project_Path }}" --configuration ${{ matrix.configuration }}

        - name: Run tests
          run: dotnet test "${{ env.Test_Project_Path }}" --configuration ${{ matrix.configuration }} --no-build --verbosity normal
        
        - name: Build WiX MSI Project
          run: msbuild "${{ env.Setup_Project_Path }}" /p:Configuration=${{ matrix.configuration }} /p:Platform=x86

        - name: List all files in repo
          run: Get-ChildItem -Recurse
          shell: pwsh
      
        - name: Upload MSI Installer
          uses: actions/upload-artifact@v4
          with:
            name: MSI-Installer-${{ matrix.configuration }}
            path: ${{ env.Setup_Output_Folder }}\*.msi

        # - name: Find MSI installer
        #   id: find_msi
        #   env:
        #     SETUP_OUTPUT_FOLDER: ${{ env.Setup_Output_Folder }}
        #   run: |
        #     $msi = Get-ChildItem -Path "$env:SETUP_OUTPUT_FOLDER" -Filter *.msi | Select-Object -First 1
        #     echo "MSI_PATH=$($msi.FullName)" >> $GITHUB_OUTPUT
        #   shell: pwsh

        # - name: Create GitHub Release
        #   id: create_release
        #   uses: actions/create-release@v1
        #   with:
        #     tag_name: ${{ github.ref_name }}
        #     release_name: Release ${{ github.ref_name }}
        #     draft: false
        #     prerelease: false
        #   env:
        #     GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        
        # - name: Upload MSI to Release
        #   uses: actions/upload-release-asset@v1
        #   with:
        #     upload_url: ${{ steps.create_release.outputs.upload_url }}
        #     asset_path: ${{ steps.find_msi.outputs.MSI_PATH }}  # Update with your actual MSI path & filename
        #     asset_name: 'VolunteerManagementUI.msi'
        #     asset_content_type: application/octet-stream
        #   env:
        #     GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

        # Restore the application to populate the obj folder with RuntimeIdentifiers
        # - name: Restore the application
          # run: dotnet restore "${{ env.Solution_Name }}"
          # working-directory: ${{ github.workspace }}
          # env:
            # Configuration: ${{ matrix.configuration }}

        - name: Debug project structure
          run: |
            echo "Listing Volunteer Management UI directory:"
            dir "Volunteer Management UI"
            echo "Listing UIBaseClass directory:"
            dir "UIBaseClass\UIBaseClass"

        - name: Check if project file exists (PowerShell)
          shell: pwsh
          run: |
            if (Test-Path "UIBaseClass\UIBaseClass\UIBaseClass.csproj") {
              Write-Host "✅ UIBaseClass.csproj found"
            } else {
              Write-Host "❌ UIBaseClass.csproj missing"
            }    

        # - name: Build the solution
        #   run: dotnet build "$env:Solution_Name" --configuration $env:Configuration
        #   shell: pwsh
        #   env:
        #     Solution_Name: 'Volunteer Management UI\Volunteer Management UI.sln'
        #     Configuration: ${{ matrix.configuration }}

        - name: Patch ProjectReference paths
          shell: pwsh
          run: tools/Patch-ProjectReferences.ps1

        - name: Restore the application
          run: msbuild $env:Solution_Name /t:Restore /p:Configuration=${{ matrix.configuration }}
          working-directory: ${{ github.workspace }}
          env:
            Configuration: ${{ matrix.configuration }}
          
        # - name: Restore dependencies
        #   run: dotnet restore "$env:Solution_Name"
        #   shell: pwsh
        #   working-directory: 'Volunteer Management UI'
        #   env:
        #     Configuration: ${{ matrix.configuration }}
        #     Solution_Name: 'Volunteer Management UI.sln'   # Just the .sln file here, relative to working-directory
        
        # - name: Build solution
        #   run: dotnet build "$env:Solution_Name" --configuration $env:Configuration --no-restore
        #   shell: pwsh
        #   working-directory: 'Volunteer Management UI'
        #   env:
        #     Configuration: ${{ matrix.configuration }}
        #     Solution_Name: 'Volunteer Management UI.sln'
